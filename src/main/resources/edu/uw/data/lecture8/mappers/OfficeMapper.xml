<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.uw.data.lecture8.mappers.OfficeMapper">


    <!--
      | ================  Nested Result used Join (highly efficient) RECOMMENDED
      -->
    <resultMap id="OfficeNestedResultJoin" type="Office">
        <id     property="officeCode" column="OFFICE_CODE"/>
        <result property="city" column="CITY"/>
        <result property="phone" column="PHONE"/>
        <result property="addressLine1" column="ADDRESS_LINE1"/>
        <result property="addressLine2" column="ADDRESS_LINE2"/>
        <result property="state" column="STATE"/>
        <result property="country" column="COUNTRY"/>
        <result property="postalCode" column="POSTAL_CODE"/>
        <result property="territory" column="TERRITORY"/>

        <!-- association is a has-one type of association -->
        <association property="officeType" javaType="OfficeType" >
            <id     property="officeType"  column="OFFICE_TYPE"/>
            <result property="description" column="DESCRIPTION"/>
        </association>
    </resultMap>




    <select id="findAllOffices_XML_NESTED_RESULTS"  resultMap="OfficeNestedResultJoin"  >
        select o.*, ot.description
        from OFFICES o
        join OFFICE_TYPES ot on o.OFFICE_TYPE =ot.OFFICE_TYPE
    </select>


    <select id="findOfficeById"  parameterType="int" resultMap="OfficeNestedResultJoin"  >
        select o.*, ot.description
        from OFFICES o
        join OFFICE_TYPES ot on o.OFFICE_TYPE =ot.OFFICE_TYPE
        where o.OFFICE_CODE =#{id}
    </select>

    <select id="findOfficeByCity"  parameterType="java.lang.String" resultMap="OfficeNestedResultJoin"  >
        select o.*, ot.description
        from OFFICES o
        join OFFICE_TYPES ot on o.OFFICE_TYPE =ot.OFFICE_TYPE
        where o.CITY =#{id}
    </select>


<!--
  | ================  Nested Select (N+1 problem) DISCOURAGED
  -->


    <resultMap id="OfficeResultNestedSelect" type="Office">
        <id     property="officeCode" column="OFFICE_CODE"/>
        <result property="city" column="CITY"/>

        <!-- has-a association ,column value is office.office_type to point to -->
        <association property="officeType" column="office_type" javaType="OfficeType"  select="selectOfficeType"/>
     </resultMap>


    <resultMap id="OfficeTypeResult" type="OfficeType">
        <id     property="officeType"  column="OFFICE_TYPE"/>
        <result property="description" column="DESCRIPTION"/>
        <!-- other cols can be  auto mapped  , no need manually speciy if you don't want to-->
    </resultMap>

    <select id="selectOfficeType"  resultMap="OfficeTypeResult"  >
         select * from OFFICE_TYPES where OFFICE_TYPE =#{id}
    </select>

    <select id="findAllOffices_XML_NESTED_SELECT"  resultMap="OfficeResultNestedSelect"  >
        select * from OFFICES
    </select>

<!--
edu.uw.data.lecture8.model
 public class Office implements Serializable {
  private String officeCode;
  private String city;
  private String phone;
  private String addressLine1;
  private String addressLine2;
  private String state;
  private String country;
  private String postalCode;
  private String territory;
  private OfficeType officeType;


            useGeneratedKeys="true"
            keyProperty="officeCode"

                  ,STATE = #{state,javaType=int,jdbcType=NUMERIC}
-->

    <!--
      | ================  CRUD, INSERT UPDATE , DELETE
      -->

    <insert id="insertOffice"  useGeneratedKeys="true"
            keyProperty="officeCode"
            flushCache="true">
        INSERT INTO  OFFICES (CITY,PHONE,ADDRESS_LINE1,ADDRESS_LINE2,STATE,COUNTRY,POSTAL_CODE,TERRITORY,OFFICE_TYPE)
        VALUES (#{city},#{phone},#{addressLine1},#{addressLine2},#{state},#{country},#{postalCode},#{territory},#{officeType.officeType})
    </insert>

    <update id="updateOffice"  flushCache="true">
        update OFFICES set
        CITY = #{city}
        ,ADDRESS_LINE1 = #{addressLine1}
        ,ADDRESS_LINE2 = #{addressLine2}
        ,STATE = #{state,javaType=java.lang.String,jdbcType=VARCHAR}
        ,COUNTRY = #{country}
        ,POSTAL_CODE = #{postalCode}
        ,TERRITORY = #{state}
        ,OFFICE_TYPE = #{officeType.officeType}
        where OFFICE_CODE = #{officeCode}
    </update>

    <delete id="deleteOffice">
        delete from OFFICES where OFFICE_CODE = #{id}
    </delete>


</mapper>